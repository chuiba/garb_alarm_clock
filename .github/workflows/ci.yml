name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test import
      run: |
        python -c "import garb_alarm_clock; print('Import successful')"

  build-test:
    name: Test Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

  build-exe-test:
    name: Test Windows Executable Build
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Test build executable (dry run)
      run: |
        echo "Testing PyInstaller configuration..."
        pyinstaller --onefile --windowed --name garb_alarm_clock_test main.py --distpath test_dist

    - name: Check if test exe was created
      run: |
        if (Test-Path "test_dist/garb_alarm_clock_test.exe") {
          Write-Host "‚úÖ Executable build test passed"
          $size = (Get-Item "test_dist/garb_alarm_clock_test.exe").Length / 1MB
          Write-Host "üì¶ Test executable size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Error "‚ùå Executable build test failed"
          exit 1
        }